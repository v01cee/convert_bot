import logging
import os
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, MAX_FILE_SIZE, LOG_LEVEL, DEBUG
from media_processor import MediaProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=log_level
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.media_processor = MediaProcessor()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("compress", self.compress_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        self.application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üé¨ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –≤ —Ç–µ–∫—Å—Ç!

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
        """
        
        keyboard = [
            [InlineKeyboardButton("üé• –í–∏–¥–µ–æ ‚Üí –¢–µ–∫—Å—Ç", callback_data="video_to_text")],
            [InlineKeyboardButton("üéµ –ê—É–¥–∏–æ ‚Üí –¢–µ–∫—Å—Ç", callback_data="audio_to_text")],
            [InlineKeyboardButton("üé¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–ò–î–ï–û", callback_data="compress_video")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
/compress - –°–∂–∞—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üé¨ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
‚Ä¢ üé• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç (OCR)
‚Ä¢ üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (Speech-to-Text)
‚Ä¢ üóúÔ∏è –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ (—á–µ—Ä–µ–∑ file_id)
‚Ä¢ üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV
‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, M4A, OGG
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB

üí° –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–∂–∞—Ç–∏–µ!
        """
        await update.message.reply_text(help_text)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        keyboard = [
            [InlineKeyboardButton("üìÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="text_process")],
            [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="file_upload")],
            [InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data="video_process")],
            [InlineKeyboardButton("üì∏ –§–æ—Ç–æ", callback_data="photo_process")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    async def compress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compress - –æ—Ç–ø—Ä–∞–≤–∫–∞ –í–ò–î–ï–û –æ–±—Ä–∞—Ç–Ω–æ"""
        await update.message.reply_text(
            "üé¨ –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –í–ò–î–ï–û\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –í–ò–î–ï–û!\n\n"
            "–≠—Ç–æ –í–ò–î–ï–û, –∞ –Ω–µ —Ñ–∞–π–ª - –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ –≤ Telegram.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤–∏–¥–µ–æ ‚Üí —Ç–µ–∫—Å—Ç)."
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "video_to_text":
            await query.edit_message_text(
                "üé• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (MP4, AVI, MOV –∏ –¥—Ä.) –∏ —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç!\n\n"
                "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ MP4, AVI, MOV, MKV\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
                ]])
            )
        elif query.data == "audio_to_text":
            await query.edit_message_text(
                "üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, M4A –∏ –¥—Ä.) –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!\n\n"
                "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ MP3, WAV, M4A, OGG\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ —Ñ–∞–π–ª!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
                ]])
            )
        elif query.data == "compress_video":
            await query.edit_message_text(
                "üé¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –í–ò–î–ï–û\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –í–ò–î–ï–û!\n\n"
                "üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
                "‚Ä¢ –≠—Ç–æ –í–ò–î–ï–û, –∞ –Ω–µ —Ñ–∞–π–ª\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ –≤ Telegram\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ö—É–¥—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
                ]])
            )
        elif query.data == "back_to_start":
            await self.start_command(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "menu":
            await self.menu_command(update, context)
        elif query.data == "text_process":
            await query.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif query.data == "file_upload":
            await query.edit_message_text("üìÅ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif query.data == "video_process":
            await query.edit_message_text("üé• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif query.data == "photo_process":
            await query.edit_message_text("üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif query.data == "info":
            await query.edit_message_text("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–í–µ—Ä—Å–∏—è: 1.0\n–°–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é python-telegram-bot")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user = update.effective_user
        
        response = f"üìù –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})"
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if "–ø—Ä–∏–≤–µ—Ç" in text.lower():
            response += "\n\nüëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        elif "—Å–ø–∞—Å–∏–±–æ" in text.lower():
            response += "\n\nüòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!"
        elif "–ø–æ–∫–∞" in text.lower():
            response += "\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–≤–∏–¥–∏–º—Å—è!"
        
        await update.message.reply_text(response)
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        document = update.message.document
        file_name = document.file_name
        file_size = document.file_size
        mime_type = document.mime_type
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º
        if mime_type and mime_type.startswith('audio/'):
            await self.handle_audio_file(update, context, document)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º
        if mime_type and mime_type.startswith('video/'):
            await self.handle_video_file(update, context, document)
            return
        
        response = f"üìÑ –ü–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç:\n\nüìÅ –ò–º—è: {file_name}\nüìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\nüîñ –¢–∏–ø: {mime_type or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        
        await update.message.reply_text(response)
    
    async def handle_audio_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, document):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        file_name = document.file_name
        file_size = document.file_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / (1024*1024):.0f}MB\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = await update.message.reply_text(
            f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...\n\n"
            f"üìÅ –§–∞–π–ª: {file_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
            "‚è≥ –ü—Ä–µ–æ–±—Ä–∞–∑—É—é —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_audio:
                temp_audio_path = temp_audio.name
                await file.download_to_drive(temp_audio_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            result = self.media_processor.process_audio_to_text(temp_audio_path)
            
            if result['success']:
                result_text = f"""
üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª: {file_name}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
                """
            else:
                result_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:

{result['text']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
            
            await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_video_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, document):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        file_name = document.file_name
        file_size = document.file_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / (1024*1024):.0f}MB\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = await update.message.reply_text(
            f"üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ —Ñ–∞–π–ª...\n\n"
            f"üìÅ –§–∞–π–ª: {file_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
            "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_video:
                temp_video_path = temp_video.name
                await file.download_to_drive(temp_video_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ —Ñ–∞–π–ª...\n\n"
                f"üìÅ –§–∞–π–ª: {file_name}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
                "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...\n"
                "‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ç–µ–∫—Å—Ç..."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ: –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            result = self.media_processor.process_video_to_text(temp_video_path)
            
            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∂–º–µ—Ç)
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ file_id (Telegram —Å–æ–∂–º–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                    await update.message.reply_document(
                        document=document.file_id,  # –î–æ–∫—É–º–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                        caption=f"""
üé¨ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∞–ª):

üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª: {file_name}
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
‚Ä¢ File ID: `{document.file_id}`
                        """,
                        parse_mode='Markdown'
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    result_text = f"""
üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª: {file_name}
‚Ä¢ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {file_size / (1024*1024):.1f}MB
‚Ä¢ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {result['audio_size'] / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
                    """
                    await processing_msg.edit_text(result_text)
            else:
                result_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:

{result['text']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
                await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞: {str(e)}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ"""
        video = update.message.video
        duration = video.duration
        file_size = video.file_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ
        if update.message.caption and "—Å–∂–∞—Ç—å" in update.message.caption.lower():
            await self.compress_video_only(update, context, video)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∂–∞—Ç—å
            await update.message.reply_text(
                f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n"
                f"üìè –õ–∏–º–∏—Ç: {MAX_FILE_SIZE / (1024*1024):.0f}MB\n\n"
                f"üóúÔ∏è –ù–æ —è –º–æ–≥—É —Å–∂–∞—Ç—å –µ–≥–æ –¥–ª—è —Ç–µ–±—è!\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–ò–î–ï–û –≤ —Ö—É–¥—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            await self.send_video_quality(update, context, video, "worst")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = await update.message.reply_text(
            f"üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...\n\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
            "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_video:
                temp_video_path = temp_video.name
                await file.download_to_drive(temp_video_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...\n\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
                "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...\n"
                "‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ç–µ–∫—Å—Ç..."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ: –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            result = self.media_processor.process_video_to_text(temp_video_path)
            
            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∂–º–µ—Ç)
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ file_id (Telegram —Å–æ–∂–º–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                    await update.message.reply_video(
                        video=video.file_id[0],  # –•—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        caption=f"""
üé¨ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ (Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∞–ª):

üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
‚Ä¢ File ID: `{video.file_id}`
                        """,
                        parse_mode='Markdown'
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    result_text = f"""
üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –≤–∏–¥–µ–æ:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫
‚Ä¢ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {file_size / (1024*1024):.1f}MB
‚Ä¢ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {result['audio_size'] / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
                    """
                    await processing_msg.edit_text(result_text)
            else:
                result_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:

{result['text']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
                await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç"""
        audio = update.message.audio
        duration = audio.duration
        file_size = audio.file_size
        file_name = audio.file_name or "audio_file"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE / (1024*1024):.0f}MB\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = await update.message.reply_text(
            f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...\n\n"
            f"üìÅ –§–∞–π–ª: {file_name}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f}MB\n\n"
            "‚è≥ –ü—Ä–µ–æ–±—Ä–∞–∑—É—é —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç..."
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(audio.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_audio:
                temp_audio_path = temp_audio.name
                await file.download_to_drive(temp_audio_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
            result = self.media_processor.process_audio_to_text(temp_audio_path)
            
            if result['success']:
                result_text = f"""
üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∞—É–¥–∏–æ:

{result['text']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª: {file_name}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(result['text'])}
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {audio.performer or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                """
            else:
                result_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:

{result['text']}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
            
            await processing_msg.edit_text(result_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_size = photo.file_size
        
        response = f"üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ:\n\nüìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
        
        await update.message.reply_text(response)
    
    async def compress_video_only(self, update: Update, context: ContextTypes.DEFAULT_TYPE, video):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–ò–î–ï–û –æ–±—Ä–∞—Ç–Ω–æ (–Ω–µ —Ñ–∞–π–ª!)"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–ò–î–ï–û –æ–±—Ä–∞—Ç–Ω–æ (—Ö—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            await update.message.reply_video(
                video=video.file_id[0],  # –•—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                caption=f"""
üé¨ –í–ò–î–ï–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video.duration} —Å–µ–∫
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {video.file_size / (1024*1024):.1f}MB
‚Ä¢ File ID: `{video.file_id}`

üí° –≠—Ç–æ –í–ò–î–ï–û, –∞ –Ω–µ —Ñ–∞–π–ª!
                """,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}"
            )
    
    async def send_video_quality(self, update: Update, context: ContextTypes.DEFAULT_TYPE, video, quality="worst"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            if quality == "best":
                # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                await update.message.reply_video(
                    video=video.file_id[-1],  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    caption="üé¨ –í–ò–î–ï–û (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)"
                )
            elif quality == "worst":
                # –•—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                await update.message.reply_video(
                    video=video.file_id[0],  # –•—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    caption="üé¨ –í–ò–î–ï–û (—Ö—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)"
                )
            else:
                # –û–±—ã—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                await update.message.reply_video(
                    video=video.file_id[0],  # –•—É–¥—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    caption="üé¨ –í–ò–î–ï–û (–æ–±—ã—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}"
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
